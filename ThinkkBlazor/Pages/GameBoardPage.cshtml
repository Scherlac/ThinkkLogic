@page "/gameboard"

@{
    try
    {

        <div>
            @if (Game == null)
            {
                <p><em>Loading...</em></p>
            }
            else if ((Game?.Attempts?.Count ?? 0) > 3)
            {
                var x = 0.0;
                var y = 0.0;
                var show = 0.0;

                <div>
                    <svg xmlns:svg="http://www.w3.org/2000/svg"
                         xmlns="http://www.w3.org/2000/svg"
                         xmlns:xlink="http://www.w3.org/1999/xlink"
                         width="300"
                         height="600"
                         viewBox="0 0 210 297">
                        <defs id="defs430">
                            <radialGradient id="radialGradient4952"
                                            cx="0.0"
                                            cy="0.0"
                                            fx="0.0"
                                            fy="0.0"
                                            r="20.0"
                                            gradientUnits="userSpaceOnUse"
                                            gradientTransform="matrix(0.8,0.8,-0.6,0.6,10,10)">
                                <stop style="stop-color:#ffffff;stop-opacity:1;"
                                      offset="0" />
                                <stop style="stop-color:#ffffff;stop-opacity:0;"
                                      offset="1" />
                            </radialGradient>
                        </defs>
                        <g>
                            <image transform="rotate(-90)" preserveAspectRatio="none meet" x="-600" y="0" width="600" height="600" xlink:href="images/Background.jpg" />
                            @{
                                var i = 0;

                                <g transform="translate(30.0,30.0)">
                                    <CombinationView Target="@Game.Puzzle" />
                                </g>


                                i = 0;
                                y = 50.0 * Game.CurrentAttempt;

                                <g transform="translate(0.0,80.0)">
                                    <rect width="300"
                                          height="50"
                                          x="0"
                                          y="0"
                                          fill="silver"
                                          class="animated-slow"
                                          style="opacity:0.3;stroke-width:0"
                                          transform="translate(0.0,@y)"
                                          ondblclick="@Game.Evalueate" />

                                    @foreach (var a in Game.Attempts)
                                    {
                                        y = 50.0 * i + 5.0;

                                        <g transform="translate(30,@y)">
                                            <CombinationView Target="@a" />
                                        </g>
                                        i = i + 1;
                                    }
                                </g>
                            }
                        </g>

                        @{
                            show = 0.0;

                            switch (Game.Hint)
                            {
                                case "put":
                                    y = 50.0 * Game.CurrentAttempt + 110;
                                    x = 120.0;
                                    show = 1.0;
                                    break;
                                case "eval":
                                    y = 50.0 * Game.CurrentAttempt + 110;
                                    x = 30.0;
                                    show = 1.0;
                                    break;

                            }

                            <g class="animated-slow" transform="translate(@x,@y)" opacity="@show">
                                <g transform="matrix(.1263 0 0 .1263 -68.41 -29.5)" stroke-width="7.918" opacity="0.6">
                                    <path d="m692.1 526.1c43.88 60.68 152.7 58.81 185-12.74 23.27-47.52 3.437-104.6-24.41-144.8-34.95-24.81-82.82-12.68-119.9 1.064-45.31 25.05-48.69-55.81-91.11-41.59-33.13 45.22 42.24 72.26 46.58 114.4-3.244 27.74-12.07 57.28 3.82 83.68z" fill="#deaa87" />
                                    <path d="m832.8 567.1c-58.48 31.45-143.7-0.9109-160.4-66.83-7.449-22 15.35-45.1 1.446-65.89-18.4-27.68-36.73-55.49-53.8-84.04-8.546-27.76 32.83-51.19 52.01-29.28 12.81 13.32 16.68 33.67 32.14 44.46 14.96 3.753 28.85-7.624 43.46-11.04 14.22-6.883 29.92-12.52 45.84-9.62 16.9-2.2 37.28-12.29 51.87 1.396 17.9 29.25 41.01 56.71 49.89 90.64 11.96 50.36-15.53 108.2-62.47 130.2zm20.89-37.91c34.93-36.22 33.75-99.13-0.0655-135.7-4.54-14.58-14.77-30.03-30.14-34.3-21.42 5.482-4.556 27.38 2.873 38.41 14.61 13.2-7.199 27.65-15.1 11.94-11.18-15.12-14.08-40.35-35.58-44.76-19.91 5.494-7.115 31.49 3.684 41.46 12.01 7.435 25.62 27.54 5.817 34.99-14.32-4.196-17.27-23.8-25.25-35.44-5.861-12.74-16.72-28.67-33.01-24.79-10.9 15.82 3.133 33.11 13.39 45 9.073 9.532 28.49 30.98 9.388 39.66-14.46-5.413-17.86-23.39-26.94-34.61-20.75-33.52-42.74-66.27-65.37-98.55-23.11-2.858-17.69 26-7.287 37.17 13.78 15.25 24.33 32.84 35.39 50.24 13.51 21.02 27.01 42.03 40.52 63.05-7.415 23.53-32-22.79-36.16-0.0222-0.7034 38.56 33.83 68.52 69.48 75.65 33.47 7.414 71.75-3.029 94.38-29.43zm-207.2-81.94c-68.03 1.446-123.7-76.36-98.69-140.1 16.54-53.4 80.2-87.66 133.4-67.89 25.15 7.928 47.83 25.14 60.11 48.73 21.91 5.512 3.078 50.62-8.886 23.36-11.06-32.5-41.68-57.56-76.4-59.07-44.46-3.824-90.2 29.9-94.67 75.33-7.522 45.43 26.25 96.25 73.7 99.75 14.13-4.598 39.98 18.78 11.43 19.88zm-17.56-36.1c-51.03-10.21-72.03-83.31-35.56-119.8 30.15-35.82 96.47-31.76 118.5 10.9 11.89 6.499 14.83 40.99-2.767 35.98-10.22-9.879-9.06-26.61-19.79-36.7-15.37-18.98-44.95-21.19-65.78-10.75-21.2 10.48-33.64 34.67-30.48 57.97-1.5 21.85 21.24 31.49 34.16 44.77 4.292 4.733 11.96 15.17 1.718 17.68z" fill="#784421" stroke-width="7.918" />
                                </g>
                            </g>
                        }
                    </svg>
                </div>
                <select class="btn btn-primary" bind="@level">
                    <option>Level 1</option>
                    <option>Level 2</option>
                </select>
                <button class="btn btn-primary" onclick="@NewGame">NewGame</button>
                <button class="btn btn-primary" onclick="@Game.Refresh">Refresh</button>
            }

        </div>
    }
    catch (Exception e)
    {
        <h1>@e.Message</h1>
        <pre>
            @e.StackTrace
        </pre>
    }

}
@functions{

    public string currentState = "Create";
    private static int level = 1;

    //@Puzzle
    //@foreach(var a in Attempts)
    //{
    //    @a
    //    }

    private static GameBoard Game = null;

    protected override async Task OnInitAsync()
    {
        InitGame();
        Game.Hint = "put";
    }

    private void InitGame()
    {
        if (Game == null)
        {
            try
            {
                Game = new GameBoard();
                Game.NewGame(level);
            }
            catch (Exception e)
            {
                currentState = e.Message + " --> " + e.StackTrace;
            }
        }
    }

    private void NewGame()
    {
        Game.NewGame(level);
    }

}
